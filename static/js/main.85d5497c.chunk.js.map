{"version":3,"sources":["components/types.tsx","components/list.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["emptyTask","name","ActiveTaskForm","pushTask","useState","task","setTask","Form","onSubmit","evt","a","async","preventDefault","Control","type","onChange","ev","target","value","ActiveTaskItem","disabled","active","DisabledTaskItem","TaskItem","child","ListGroup","Item","DisabledItem","variant","key","ActiveItem","TaskList","initialTasks","activeTask","setActiveTask","slice","tail","inactiveTasks","setInactiveTasks","deleteButton","Button","block","onClick","length","tailTip","headAndShoulders","newActive","oldActive","reverse","map","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uRAIaA,EAAY,CACxBC,KAAM,I,wBCQDC,EAED,SAAC,GAEC,IADNC,EACK,EADLA,SACK,EACmBC,mBAASJ,GAD5B,mBACEK,EADF,KACQC,EADR,KAYL,OACC,kBAACC,EAAA,EAAD,CACCC,SAVmB,SACpBC,GADoB,SAAAC,EAAAC,OAAA,gDAGpBF,EAAIG,iBACJT,EAASE,GANcC,EAAQN,GAEX,uCAYnB,kBAACO,EAAA,EAAKM,QAAN,CACCC,KAAK,OACLC,SAAU,SAACC,GAAD,OAA6CV,EAAQ,CAC7DL,KAAMe,EAAGC,OAAOC,SAGlBA,MAAOb,EAAKJ,SAOVkB,EAED,SAAC,GAAD,IAAEd,EAAF,EAAEA,KAAF,OAAY,kBAAC,EAAD,CAChBA,KAAMA,EACNe,UAAU,EACVC,QAAQ,KAGHC,EAED,SAAC,GAAD,IAAEjB,EAAF,EAAEA,KAAF,OAAY,kBAAC,EAAD,CAChBA,KAAMA,EACNe,UAAU,EACVC,QAAQ,KAGHE,EAID,SAAC,GAA8B,IAA7BlB,EAA4B,EAA5BA,KAAMe,EAAsB,EAAtBA,SAuBNI,GAvB4B,EAAZH,OAuBRhB,EACb,oCACCA,EAAKJ,MAGN,+BAID,OAAOmB,EA7BF,SAAC,GAAD,IAAEI,EAAF,EAAEA,MAAF,OACJ,kBAACC,EAAA,EAAUC,KAAX,CACCN,UAAQ,GAEPI,GAyBeG,CAAa,CAACH,UAnB3B,SAAC,GAAD,IAAEA,EAAF,EAAEA,MAAF,OACJ,kBAACC,EAAA,EAAUC,KAAX,CACCL,QAAM,EACNO,QAAQ,UACRC,IAAI,SAEHL,GAceM,CAAW,CAACN,WAGlBO,EAER,SAAC,GAAyB,IAAD,IAAvBC,oBAAuB,MAAR,GAAQ,IACO5B,mBAAc4B,EAjGjB,IAgGJ,mBACtBC,EADsB,KACVC,EADU,OAEa9B,mBAjG9B,SAACM,GAAD,OAAmBA,EAAEyB,MAAM,GAiGYC,CAAKJ,IAF3B,mBAEtBK,EAFsB,KAEPC,EAFO,KAiBvBC,EACL,kBAACC,EAAA,EAAD,CACCZ,QAAQ,SACRa,OAAK,EACLC,QATiB,WAClBR,EA3Gc,SAACxB,GAAD,OAAmBA,EAAEA,EAAEiC,OAAO,GA2G9BC,CAAQP,IACtBC,EA3GuB,SAAC5B,GAAD,OAAmBA,EAAEyB,MAAM,GAAI,GA2GrCU,CAAiBR,MAIlC,wBASD,OACC,kBAACZ,EAAA,EAAD,KAEC,kBAACA,EAAA,EAAUC,KAAX,KACC,kBAAC,EAAD,CACCvB,SA5Ba,SAAC2C,GACjB,IAAMC,EAAYd,EAClBC,EAAcY,GACdR,EAAiB,GAAD,mBACXD,GADW,CACIU,QA0BjBR,GAEF,kBAAC,EAAD,CACClC,KAAM4B,IAGLI,EAAcM,OAAS,EACvBN,EAAcF,QAAQa,UAAUC,KAC/B,SAAA5C,GAAI,OAAI,kBAAC,EAAD,CAAkBA,KAAMA,OAGjC,uCChJC2B,G,MAAe,CAAC,CACrB/B,KAAM,MASQiD,EANO,kBACrB,kBAAC,EAAD,CACClB,aAAcA,KCCImB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.85d5497c.chunk.js","sourcesContent":["export interface Task {\n\tname: string;\n};\n\nexport const emptyTask = {\n\tname: '',\n};\n","import React, {useState} from 'react';\nimport {Task, emptyTask} from './types';\nimport {\n\tListGroup,\n\tForm,\n\tButton\n} from 'react-bootstrap';\n\nconst head = (a: Array<any>) => a[0];\nconst tail = (a: Array<any>) => a.slice(1);\nconst tailTip = (a: Array<any>) => a[a.length-1];\nconst headAndShoulders = (a: Array<any>) => a.slice(0, -1);\n\nconst ActiveTaskForm: React.FC<{\n\tpushTask: Function;\n}> = ({\n\tpushTask\n}) => {\n\tconst [task, setTask] = useState(emptyTask);\n\tconst resetTask = () => setTask(emptyTask);\n\n\tconst handleSubmit = async (\n\t\tevt: React.FormEvent<HTMLFormElement>\n\t) => {\n\t\tevt.preventDefault();\n\t\tpushTask(task);\n\t\tresetTask();\n\t};\n\n\treturn (\n\t\t<Form\n\t\t\tonSubmit={handleSubmit}\n\t\t>\n\t\t\t<Form.Control\n\t\t\t\ttype=\"text\"\n\t\t\t\tonChange={(ev: React.ChangeEvent<HTMLInputElement>) => setTask({\n\t\t\t\t\t\tname: ev.target.value\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t\tvalue={task.name}\n\t\t\t>\n\t\t\t</Form.Control>\n\t\t</Form>\n\t);\n};\n\nconst ActiveTaskItem: React.FC<{\n\ttask: Task;\n}> = ({task}) => <TaskItem\n\ttask={task}\n\tdisabled={false}\n\tactive={true}\n/>\n\nconst DisabledTaskItem: React.FC<{\n\ttask: Task;\n}> = ({task}) => <TaskItem\n\ttask={task}\n\tdisabled={true}\n\tactive={false}\n/>\n\nconst TaskItem: React.FC<{\n\ttask: Task;\n\tdisabled: boolean;\n\tactive: boolean;\n}> = ({task, disabled, active}) => {\n\tconst DisabledItem: React.FC<{\n\t\tchild: any;\n\t}> = ({child}) => (\n\t\t<ListGroup.Item\n\t\t\tdisabled\n\t\t>\n\t\t\t{child}\n\t\t</ListGroup.Item>\n\t);\n\t\n\tconst ActiveItem: React.FC<{\n\t\tchild: any;\n\t}> = ({child}) => (\n\t\t<ListGroup.Item\n\t\t\tactive\n\t\t\tvariant=\"primary\"\n\t\t\tkey=\"prime\"\n\t\t>\n\t\t\t{child}\n\t\t</ListGroup.Item>\n\t);\n\n\tconst child = task ? (\n\t\t<>\n\t\t{task.name}\n\t\t</>\n\t) : (\n\t\t<div>\n\t\t</div>\n\t) ;\n\n\treturn disabled ? DisabledItem({child}) \n\t                : ActiveItem({child});\n};\n\nexport const TaskList: React.FC<{\n\tinitialTasks: Array<Task>;\n}> = ({initialTasks = []}) => {\n\tconst [activeTask, setActiveTask] = useState(head(initialTasks));\n\tconst [inactiveTasks, setInactiveTasks] = useState(tail(initialTasks));\n\n\tconst pushTask = (newActive: Task) => {\n\t\tconst oldActive = activeTask;\n\t\tsetActiveTask(newActive);\n\t\tsetInactiveTasks(\n\t\t\t[...inactiveTasks, oldActive]\n\t\t);\n\t};\n\n\tconst deleteTask = () => {\n\t\tsetActiveTask(tailTip(inactiveTasks));\n\t\tsetInactiveTasks(headAndShoulders(inactiveTasks));\n\t};\n\n\tconst deleteButton = (\n\t\t<Button\n\t\t\tvariant=\"danger\"\n\t\t\tblock\n\t\t\tonClick={deleteTask}\n\t\t>\n\t\t\tDELETE DELETE DELETE \n\t\t</Button>\n\t);\n\n\treturn (\n\t\t<ListGroup\n\t\t>\n\t\t\t<ListGroup.Item>\n\t\t\t\t<ActiveTaskForm\n\t\t\t\t\tpushTask={pushTask}\n\t\t\t\t/>\n\t\t\t\t{deleteButton}\n\t\t\t</ListGroup.Item>\n\t\t\t<ActiveTaskItem\n\t\t\t\ttask={activeTask}\n\t\t\t/>\n\t\t\t{\n\t\t\t\t(inactiveTasks.length > 0) ? (\n\t\t\t\t\tinactiveTasks.slice().reverse().map(\n\t\t\t\t\t\ttask => <DisabledTaskItem task={task}/>\n\t\t\t\t\t)\n\t\t\t\t) : (\n\t\t\t\t\t<></>\n\t\t\t\t)\n\t\t\t}\n\t\t</ListGroup>\n\t);\n};\n","import React from 'react';\nimport './App.css';\nimport {TaskList} from './components/list';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst initialTasks = [{\n\tname: ''\n}];\n\nconst App: React.FC = () => (\n\t<TaskList\n\t\tinitialTasks={initialTasks}\n\t/>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}